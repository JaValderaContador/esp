[1/10] Performing build step for 'bootloader'
[1/1] cd /root/esp/tfpro/hello_world/build/bootloader/esp-idf/esptool_py && /root/esp/idf-tools/python_env/idf5.3_py3.10_env/bin/python /root/esp/idf/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /root/esp/tfpro/hello_world/build/bootloader/bootloader.bin
Bootloader binary size 0x6f50 bytes. 0xb0 bytes (1%) free.
[2/8] Building CXX object esp-idf/main/CMakeFiles/__idf_main.dir/constants.cc.obj
[3/8] Building CXX object esp-idf/main/CMakeFiles/__idf_main.dir/model_int8.cc.obj
[4/8] Linking C static library esp-idf/main/libmain.a
[5/8] Generating ld/sections.ld
[6/8] Linking CXX executable hello_world.elf
[7/8] Generating binary image from built executable
esptool.py v4.8.dev4
Creating esp32 image...
Merged 3 ELF sections
Successfully created esp32 image.
Generated /root/esp/tfpro/hello_world/build/hello_world.bin
[8/8] cd /root/esp/tfpro/hello_world/build/esp-idf/esptool_py && /root/esp/idf-tools/python_env/idf5.3_py3.10_env/bin/python /root/esp/idf/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /root/esp/tfpro/hello_world/build/partition_table/partition-table.bin /root/esp/tfpro/hello_world/build/hello_world.bin
hello_world.bin binary size 0xfe3a0 bytes. Smallest app partition is 0x100000 bytes. 0x1c60 bytes (1%) free.
Warning: The smallest app partition is nearly full (1% free space left)!
